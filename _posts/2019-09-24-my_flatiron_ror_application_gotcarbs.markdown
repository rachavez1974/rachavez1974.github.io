---
layout: post
title:      "My FlatIron ROR application (GotCarbs?)."
date:       2019-09-24 20:52:47 +0000
permalink:  my_flatiron_ror_application_gotcarbs
---


Today I finished my Ruby On Rails FlatIron project.  I must say that it has been a journey to get here, and I really, really love developing using the ROR framework.  As a result, I decided to do an that meets all the requirements for FlatIron school, and more.  The requirements are listed on my git repository, and I have listed the other features as well.  When I approach a new project, I approach by first meeting all the requirements, and then I ask myself on what areas am I weak.  In the case of this app, I wanted to practice more associations, and wanted to make them as complicated as possible. I also wanted to practice using before_action filters. I have accomplished all of that in this application as you would see it from my git repo.  Another awesome aspect of my application is that I added an admin functionality, and the admin has its website to accomplish tasks.  In all, this application can be seen as being two applications. There's a layout for regular users, and a total different layout for admin.  I got to practice a lot about layouts which something I didn't understand that well. I also did a lot of research on the assets pipelines, as a result, I added bootstrap and a main .scss file. 

On the othe hand, I wish I had figured out how to add different .scss files for different controllers, but I couldn't.  Therefore, the application has some css within its views which it ain't ROR like.  But the styles look good, and will have to wait for my review.  I must admit that I practiced a lot doing this application.  I basically took everything from the lessons learned in ROR and applied it to this application.  I don't think I left out anything, and that makes me feel so good about continuing learning the ROR framework. 

Some of the features this application has is that I managed to displayed the menus with only one view, and the help of partials.  What I mean is that my application has 6 menus that can be offered: breakfast, lunch, happy hour, dinner, latenight, and brunch. One of the difficulties I had was to display the correct menu at the right time, and for that I created some helpers and made use of the DateTime library.  Another issue with the menu came upon when a user don't want to see the current menu, but it wants to see the other menus.  Those other menus shouldn't have the add to cart functionaliy. Also what if an item runs out, should be seen still on the menu and be marked as unavailable in the db.  The one view takes care of these requirements. It was hard, but it is doable and it tells us how flexiblle the ROR framework is. 

As for another issue, I decided to make the cart model strictly based on database storage, and I didn't use session which I saw some examples on the web. I can't say that this approach is good, however, it is really fast. It updates immediately. Additionally, the application only allows user to build a cart, and see their history order when they're log in. It was getting out of controlled, and wanted to make it simple.  Another cool thing about the application is that when user sign up, they will have a nested form for their address information.  On the other hand, if they want to add a new address, they can still do it with address controller. 

Finally, the admin can do a lot of things with items, users, and orders. However, they cannot place a new order or add a new item to an order.  Once again, I could have used this functionality with nested resources, but I needed to bring this application to its conclusion.  The admin, on the other hand, it can do any of the CRUD operations on items or users.  In all, it was a great experience and can't wait to do my next project.  Thank you for reading. 
