---
layout: post
title:      "My Sinatra Project"
date:       2019-08-08 05:31:49 +0000
permalink:  my_sinatra_project
---


I have reached, and have finished my Sinatra project.  My project consists of a tracker that help students track their labs and experiments.  There are four models in this project: student, lab, teacher, and experiment.  For the student model, students are able to sign up and create account based on a unique user name.  Once signed up students are logged in via sessions, and can update, see, and destroy their profile. The lab model is the join table between students and teachers.  This relationship pertains to has many through.  Students have many teachers, and teachers have many students through labs.  The lab model is also a join table for experiments and students.  Students can have many experiments through labs, and experiments can have many students through labs. The lab model belongs to both, student and teacher models.  An experiment belongs to a lab.  The application has six controllers. The application controller, the student controller, the static pages controller for the about/home page.  The experiments controller, and the labs controller. The lab controller is mainly the one directing the symphony of the application because is the one joining the rest of the models.  And lastly a session controller that allows signed up users to log in.  The application uses the bcrypt for authentication.  As you may know, the bcrypt gem allows authentication via a password_digest that is salted, or encrypted so passwords are never saved into the database.  There's also validation in this application.  The validations happen via .errors method from active records that return a hash of errors.  Also, flash is used as a form of validation or should I say as a way of clarification to the user of what's happening throughout the application.  There's also data protection on both fronts: back and front.  In the front end buttons are hidden using a helper class called Sessions which has a set of functions such as is_logged_in?. There's also extensive use of css and html to make the front end of the application attractive.  I just started learning about grids, so some of the dropdown menus may not work as expected.  As for the back end, only authorized users are allowed to see, manipulate, and store data.  Again, this mechanism of protections happens via the Sessions helper.  Finally, if you clone this application, you will be able to run a seed file that I made to test your data.  It is amazing how much I have learned about http requests, sessions, data protection, databases, css, html, and mvc.  I can't wait to start in ROR.  Blessed day!
